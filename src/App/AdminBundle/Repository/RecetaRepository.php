<?php

namespace App\AdminBundle\Repository;

/**
 * RecetaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecetaRepository extends \Doctrine\ORM\EntityRepository
{

	public function getRecetasHoraIngesta($horaIngesta_id)
	{
		$qp = $this->createQueryBuilder('r')->select('r')->leftJoin('r.horasIngesta', 'h')->where('h.id = :horaIngesta_id')->setParameter('horaIngesta_id', $horaIngesta_id)->addOrderBy('r.fechaCreacion', 'ASC');
		return $qp->getQuery()->getResult();
	}

	public function getRecetasTipoReceta($tipoReceta_id)
	{
		$qp = $this->createQueryBuilder('r')->select('r')->where('r.TipoReceta = :tipoReceta_id')->setParameter('tipoReceta_id', $tipoReceta_id)->addOrderBy('r.fechaCreacion', 'ASC');
		return $qp->getQuery()->getResult();
	}

	public function getlastThreeReceta($limit = null)
	{
	$qp = $this->createQueryBuilder('r')->select('r')->addOrderBy('r.fechaCreacion', 'DESC');

	if (false === is_null($limit))
		$qp->setMaxResults($limit);

	return $qp->getQuery()->getResult();
	}

	public function getTopReceta($limit = null)
	{
		$qp = $this->createQueryBuilder('r')->select('r')->addOrderBy('r.mediaPuntuacion', 'DESC');

		if (false === is_null($limit))
			$qp->setMaxResults($limit);

		return $qp->getQuery()->getResult();
	}

	public function queryAll(array $valores = array())
	  {
	        $em = $this->getEntityManager();
	        $qb = $em->createQueryBuilder();
	        $qb->select('a');
	        $qb->from('AdminBundle:Receta', 'a');

	        if (array_key_exists("nombre", $valores))
	        {
	            $valores['nombre'] = trim($valores['nombre']);
	            if (strlen($valores['nombre'])>0)
	            {
	                $qb->where($qb->expr()->like("a.nombre", "?1"));
	                $qb->setParameter(1,"%".$valores['nombre']."%");
	            }

	            $valores['TipoReceta'] = trim($valores['TipoReceta']);
	            if (strlen($valores['TipoReceta'])>0)
	            {
	            	$qb->innerJoin('a.TipoReceta', 't');
	                $qb->AndWhere($qb->expr()->like("t.nombre", "?2"));
	                $qb->setParameter(2,"%".$valores['TipoReceta']."%");
	            }

	            $valores['numeroComensales'] = trim($valores['numeroComensales']);
	            if (strlen($valores['numeroComensales'])>0)
	            {
	                $qb->AndWhere($qb->expr()->like("a.numeroComensales", "?4"));
	                $qb->setParameter(4,$valores['numeroComensales']);
	            }

	            $valores['celiaco'] = trim($valores['celiaco']);
	            if (strlen($valores['celiaco'])>0)
	            {
	                $qb->AndWhere($qb->expr()->like("a.celiaco", "?5"));
	                $qb->setParameter(5,$valores['celiaco']);
	            }
	        }

	        $consulta = $qb->getQuery();
	        return $consulta;
	  }

	  public function getPuntuacionMedia($receta_id)
	{
		$qp = $this->createQueryBuilder('r')->select('avg(p.puntuacion)')->where('r.id = :receta_id')->setParameter('receta_id', $receta_id)->innerJoin('r.puntuaciones','p');
		return $qp->getQuery()->getSingleScalarResult();
	}

	public function getRecetaHoraIngesta($menu_id, $horaIngesta_id)
	{
		$qp = $this->createQueryBuilder('r')->select('r')->innerJoin('r.subMenus', 's')->where('s.HoraIngesta= :horaIngesta_id')->innerJoin('s.Menu','m')->andWhere('m.id= :menu_id')->setParameter('horaIngesta_id', $horaIngesta_id)->setParameter('menu_id', $menu_id);
		return $qp->getQuery()->getResult();
	}

	public function getRecetasMenu($menu)
	{
		$qp = $this->createQueryBuilder('r')->select('r')->innerJoin('r.subMenus', 's')->where('s.Menu = :menu')->setParameter('menu', $menu->getId());
		return $qp->getQuery()->getResult();
	}

	public function getIngredientesDistribucion()
	{
		$qp = $this->createQueryBuilder('r')->select('i.nombre','count(i.nombre) as frecuencia')->innerJoin('r.cantidadesUtilizadas', 'c')->innerJoin('c.Ingrediente', 'i')->groupBy('r.nombre');
		
		return $qp->getQuery()->getResult();
	}
	public function getNumeroReceta()
	{
		$qp = $this->createQueryBuilder('r')->select('count(r.id)');
		
		return $qp->getQuery()->getSingleScalarResult();
	}

	
}
